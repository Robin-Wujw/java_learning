<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">


    <bean id="studentOne" class="com.robin.spring.pojo.Student"></bean>
    <bean id="studentTwo" class="com.robin.spring.pojo.Student">
<!--        property:通过成员变量的方法进行赋值
            name:设置需要赋值的属性名 (和set方法有关)
            value:设置为属性所赋的值
            -->
        <property name="sid" value="1001"></property>
        <property name="sname" value="张三"></property>
        <property name="age" value="23"></property>
        <property name="gender" value="男"></property>
        <property name="score" value="98"></property>
    </bean>
    <bean id="studentThree" class="com.robin.spring.pojo.Student">
        <constructor-arg value="1002"></constructor-arg>
        <constructor-arg value="李四"></constructor-arg>
        <constructor-arg value="24"></constructor-arg>
        <constructor-arg value="女"></constructor-arg>
        <constructor-arg value="99"></constructor-arg>
    </bean>
    <bean id="studentFour" class="com.robin.spring.pojo.Student">
        <property name="sid" value="1003"></property>
        <!--
            <: &lt;
            >: &gt;
        -->
<!--        <property name="sname" value="&lt;王五&gt;"></property>        -->
        <!-- 解决方案二：使用CDATA节 -->
        <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 -->
        <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 -->
        <!-- 所以CDATA节中写什么符号都随意 -->
        <property name="sname" >
            <value><![CDATA[<王五>]]></value>
        </property>
        <property name="gender">
            <null/>
        </property>
    </bean>
        <bean id="studentFive" class="com.robin.spring.pojo.Student">
            <property name="sid" value="1004"></property>
            <property name="sname" value="赵六"></property>
            <property name="age" value="26"></property>
            <property name="gender" value="男"></property>
            <property name="score" value="97"></property>
            <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
<!--            <property name="clazz" ref="clazzOne"></property>-->
            <!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 -->
<!--            <property name="clazz.cid" value="2222"></property>-->
<!--            <property name="clazz.cname" value="远大前程班"></property>-->

            <property name="clazz">
<!--                内部bean只能在当前bean内部使用，不能直接通过IOC容器获取-->
                 <bean id="clazzInner" class="com.robin.spring.pojo.Clazz">
                     <property name="cid" value="2222"></property>
                     <property name="cname" value="远大前程班"></property>
                 </bean>
            </property>
            <property name="hobby">
                <array>
                    <value>抽烟</value>
                    <value>喝酒</value>
                    <value>烫头</value>
                </array>
            </property>
            <property name="teacherMap" ref="teacherMap"></property>
<!--            <property name="teacherMap">-->
<!--                <map>-->
<!--                    <entry key="10086" value-ref="teacherOne"></entry>-->
<!--                    <entry key="10010" value-ref="teacherTwo"></entry>-->
<!--                </map>-->
<!--            </property>-->
        </bean>
    <bean id="clazzOne" class="com.robin.spring.pojo.Clazz">
        <property name="cid" value="1111"></property>
        <property name="cname" value="最强王者班"></property>
        <property name="students" ref="studentList"></property>
<!--        <property name="students">-->
<!--            <list>-->
<!--                <ref bean="studentOne"></ref>-->
<!--                <ref bean="studentTwo"></ref>-->
<!--                <ref bean="studentThree"></ref>-->
<!--            </list>-->
<!--        </property>-->
    </bean>
    <bean id="teacherOne" class="com.robin.spring.pojo.Teacher">
        <property name="tid" value="10086"></property>
        <property name="tname" value="大宝"></property>
    </bean>
    <bean id="teacherTwo" class="com.robin.spring.pojo.Teacher">
        <property name="tid" value="10010"></property>
        <property name="tname" value="小宝"></property>
    </bean>
    <util:map id="teacherMap">
        <entry key="10086" value-ref="teacherOne"></entry>
        <entry key="10010" value-ref="teacherTwo"></entry>
    </util:map>
<!--  配置一个集合类型的bean，需要使用util的约束  -->
    <util:list id="studentList">
        <ref bean = "studentOne"></ref>
        <ref bean = "studentTwo"></ref>
        <ref bean = "studentThree"></ref>
    </util:list>
    <bean id="studentSix" class="com.robin.spring.pojo.Student"
          p:sid="1005" p:sname="小明" p:teacherMap-ref="teacherMap"></bean>
</beans>