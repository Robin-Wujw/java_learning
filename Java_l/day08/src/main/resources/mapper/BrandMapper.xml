<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.BrandMapper">


    <!--
     数据库表的字段名称和实体类的属性名称不一样则不能自动封装数据
         *起别名： brand_name as brandName 对不一样的列名起别名，让别名和实体类的属性名一样
            * 缺点
         *resultMap
            1.定义<resultMap>标签
            2.在<select>标签 ,使用 resultMap属性替换resultType属性
     -->
<!--    id: 唯一标识-->
<!--    type：映射的类型，支持别名-->
    <resultMap id="brandResultMap" type="pojo.Brand">
<!--          id: 完成主键字段的映射-->
<!--             column:表的列名-->
<!--             property:实体类的属性名-->
<!--          result: 完成一般字段的映射-->
<!--            column:表的列名-->
<!--            property:实体类的属性名-->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>


    <select id="selectAll" resultMap="brandResultMap">
        select
            *
        from tb_brand;
    </select>
<!--    <select id="selectAll" resultType="pojo.Brand">-->
<!--    select -->
<!--       *-->
<!--    from tb_brand;-->

<!--
        *参数占位符：
            1.#{}:会将其替换为 ?, 为了防止SQL注入
            2.${}:拼sql。会存在SQL注入问题
            3.使用时机：
                *参数传递的时候: #{}
                *表明或者列名不固定的时候可以使用${},会存在SQL注入情况
        *参数类型：parameterType： 可以省略
        *特殊字符处理：
            1.转义字符
            2.CDATA区

-->
<!--</select>-->
    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand where id = #{id};
    </select>


<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where-->
<!--            status = #{status}-->
<!--            and company_name like #{companyName}-->
<!--            and brand_name like #{brandName}-->
<!--    </select>-->
<!--    动态条件查询-->
<!--    * if : 条件判断-->
<!--        * test: 逻辑表达式-->
<!--    * 问题:-->
<!--        * 恒等式-->
<!--        * <where> 替换 where 关键字-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
               and status = #{status}
            </if>
        <if test="companyName != null and companyName !=''">
            and company_name like #{companyName}
          </if>
        <if test="brandName != null and brandName !=''">
            and brand_name like #{brandName}
        </if>
        </where>
    </select>


<!--     <select id="selectByConditionSingle" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where-->
<!--        <choose>-->
<!--            <when test ="status!=null">-->
<!--                status = #{status}-->
<!--            </when>-->
<!--            <when test="companyName != null and companyName !=''">-->
<!--                company_name like #{companyName}-->
<!--            </when>-->
<!--            <when test="brandName != null and brandName !=''">-->
<!--                brand_name like #{brandName}-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                1=1-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--    </select>-->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
        <choose>
            <when test ="status!=null">
                status = #{status}
            </when>
            <when test="companyName != null and companyName !=''">
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName !=''">
                brand_name like #{brandName}
            </when>
        </choose>
        </where>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id" >
        insert  into tb_brand(brand_name, company_name, ordered, description, status)
        values(#{brandName},#{companyName},#{ordered},#{description},#{status})
    </insert>

<!--    <update id="update">-->
<!--        update tb_brand-->
<!--            set brand_name = #{brandName},-->
<!--                company_name = #{companyName},-->
<!--                ordered = #{ordered},-->
<!--                description = #{description},-->
<!--                status = #{status}-->
<!--            where id = #{id};-->
<!--    </update>-->
    <update id="update">
        update tb_brand
        <set>
        <if test="brandName!=null and brandName!=''">
            brand_name = #{brandName},
        </if>
        <if test="companyName!=null and companyName!=''">
            company_name = #{companyName},
        </if>
        <if test="ordered!=null">
            ordered = #{ordered},
        </if>
        <if test="description!=null and description!=''">
            description = #{description},
        </if>
        <if test="status!=null">
            status = #{status}
        </if>
        </set>
        where id = #{id};
    </update>

    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>
    <!--
     mybatis会将数组参数，封装为一个Map集合
        *默认： array = 数组 (key 和 value) 所以collection ="array" 不然用param注解改变
        *使用@Param注解来改变map集合的默认key的名称
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    </delete>

    <!--
    MyBatis 参数封装
        *单个参数:
            1.POJO类型：直接使用，属性名和参数占位符名称一致
            2.Map集合：直接使用，键名和参数占位符名称一致
            3.Collection：封装为Map集合 可以使用@Param注解，替换Map集合中默认的arg键名
                map.put("arg0",collection集合)
                map.put("collection",collection集合)
            4.List: 封装为Map集合 可以使用@Param注解，替换Map集合中默认的arg键名
                map.put("arg0",list集合)
                map.put("collection",list集合)
                map.put("list",list集合)
            5.Array: 封装为Map集合 可以使用@Param注解，替换Map集合中默认的arg键名
                map.put("arg0",数组)
                map.put("array",数组)
            6.其他类型: 直接使用

        *多个参数 ： 封装为Map集合，可以使用@Param注解，替换Map集合中默认的arg键名
            map.put("arg0",参数值1);
            map.put("arg1",参数值2);
            map.put("param1",参数值1);
            map.put("param2",参数值2);

            @Param("username")
            map.put("username",参数值1);
            map.put("arg1",参数值2);
            map.put("param1",参数值1);
            map.put("param2",参数值2);
    -->
</mapper>



